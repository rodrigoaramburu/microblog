openapi: 3.0.0
info:
  title: Microblog
  description: Uma api para uma aplicação de microblog
  version: "0.1"
servers: 
  - url: http://localhost:8080/
paths:

  /api/autenticate:
    post:
      summary: Autentica um usuário no aplicativo
      description: Realiza a autenticação de um usuário no aplicativo gerando um toke de autenticação JWT
      operationId: authUser
      requestBody:
        content: 
          application/json:
            schema: 
              $ref: '#/components/schemas/UserAuth'
              
      responses:
        '200':
          description: Usuário autenticado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    type: string
    
        '401': 
          description: Usuário ou senha inválidos

  /api/register:
    post:
      summary: Cria um novo usuário
      description: Cadastra um novo usuário no sistema
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Usuário criado com sucesso
        '400':
          description: Campos inválidos
        '409':
          description: Usuário já existe
          
  /api/users/{username}:
    get:
      summary: Retorna dados de um usuário
      description: Retorna as informações de um usuário
      parameters:
        - name: username
          in: path
          description: username do usuário
          required: true
          schema: 
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: um recurso usuário
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
            description: Usuário não encontrado
        
      
  
  /api/users/update:
    put:
      summary: Atualiaza um Usuário
      description: Atualizado os dados do usuário autenticado
      requestBody:
        content: 
          application/json:
            schema: 
              $ref: '#/components/schemas/UserUpdate'
      security:
        - bearerAuth: []
      responses:
          '200':
            description: Usuário Alterado com sucesso        
          '400':
            description: Campos inválidos
            
  /api/users/photo:
    put:
      summary: Atualiza foto de perfil
      description: Atualiza a foto de perfil recebendo uma foto em base64 encoded
      security:
        - bearerAuth: []
      requestBody:
        content: 
          application/json:
            schema: 
              type: object
              properties:
                photo: 
                  type: string
                  description: um arquivo de imagem encodade em base64
                  example: data:image/jpeg;base64, LzlqLzRBQ...
      responses:
        '200':
          description: Foto atualizada com sucesso
        '400':
          description: Campos inválidos
        '404':
          description: Usuário não encontrado     
        
        

  /api/posts/create:
    post:
      summary: Cria uma nova postagem
      description: Cria uma nova postagem associada
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Postagem criada com sucessso
        '400':
          description: Campos inválidos
            
            
            
  /api/posts/{postId}/delete:
    delete:
      summary: Deleta uma postagem
      description: Deleta uma postagem
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
          description: uudi da postagem
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Postagem deletada com sucess
        '404':
          description: Postagem não encontrada
          
  /api/posts/timeline:
    get:
      summary: Retorna as postagens da timeline
      description: Retorna as postagem da timeline do usuário, a timeline é composta das postagens dos usuários que o segue.
      parameters:
        - name: before
          in: query
          required: false
          schema:
            type: string
            format: date-time
      security:
        - bearerAuth: []
      responses:
        '200':
          description: lista de postagens da timeline
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
                  
  /api/posts/timeline/update:
    get:
      summary: Retorna as postagens da timeline anterior a uma data
      description: Retorna as postagem da timeline do usuário anterior a uma data, a timeline é composta das postagens dos usuários que o segue.
      parameters:
        - name: after
          in: query
          required: false
          description: se não for informado a data-time atual será utilizado
          schema:
            type: string
            format: date-time
      security:
        - bearerAuth: []
      responses:
        '200':
          description: lista de postagens da timeline após determinada datetime
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post' 
        
  
  /api/users/{username}/posts:
    get:
      summary: Posts de um usuário
      description: Retorna os posts de um determinado usuário
      parameters:
        - name: username
          in: path
          description: username do usuário
          required: true
          schema: 
            type: string
        - name: page
          in: query
          description: numero da pagina da paginação
          required: false
          schema: 
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200': 
          description: lista de posts do usuário
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '404':
          description: usuário não encontrado
          
            
  
  /api/users/{username}/follow:
    post:
      summary: Registra um follow
      description: Registra que o usuario cliente esta seguindo as postagens do usuario que foi passado o userId
      parameters:
        - name: username
          in: path
          required: true
          description: username de um usuario
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '201': 
          description: Seguido usuário com sucesso
        '400':
          description: Usuário já seguido
        '404':
          description: Usuário não encontrado
          

  /api/users/{username}/unfollow:
    post:
      summary: Registra um unfollow
      description: Registra que o usuario cliente parou de seguir as postagens do usuario que foi passado o userId
      parameters:
        - name: username
          in: path
          required: true
          description: username de um usuario
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200': 
          description: Usuário deixadi de seguir com sucess com sucesso
        '404':
          description: Usuário não encontrado
          
  /api/users/following:
    get:
      summary: Retorna os usuário
      description: Retornar a lista de usuário que se esta seguindo.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: lista de usuários seguidos
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/User'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: jwt

  schemas:
    UserAuth:
      type: object
      properties:
        username: 
          type: string
          example: rodrigo
        password:
          type: string
          example: password
    
    UserCreate:
      type: object
      properties:
        username:
          type: string
          example: rodrigo
        email:
          type: string
          example: rodrigoaramburu@gmail.com
        password:
          type: string
          example: secredo!
          
    UserUpdate:
      type: object
      properties:
        username:
          type: string
          example: rodrigo
        email:
          type: string
          example: rodrigoaramburu@gmail.com
        password:
          type: string
          example: secredo!
          
    User:
      type: object
      properties:
        username:
          type: string
          example: rodrigo
        email:
          type: string
          example: rodrigoaramburu@gmail.com
        createAt: 
          type: string
          format: date-time
        photo:
          type: string
          example: http://localhost:8080/pictures/rodrigo
    
    PostCreate:
      type: object
      properties:
        text:
          type: string
          
    
    Post:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        created:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
            
        
